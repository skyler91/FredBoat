apiVersion: v1
kind: Service
metadata:
  annotations:
    com.centurylinklabs.watchtower.enable: "true"
  labels:
    io.kompose.service: bot
  name: bot
spec:
  ports:
  - name: "1356"
    port: 1356
    targetPort: 1356
  selector:
    io.kompose.service: bot
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    com.centurylinklabs.watchtower.enable: "true"
  labels:
    io.kompose.service: lavalink
  name: lavalink
spec:
  ports:
  - name: "2333"
    port: 2333
    targetPort: 2333
  selector:
    io.kompose.service: lavalink
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    com.centurylinklabs.watchtower.enable: "true"
  labels:
    io.kompose.service: quarterdeck
  name: quarterdeck
spec:
  ports:
  - name: "4269"
    port: 4269
    targetPort: 4269
  selector:
    io.kompose.service: quarterdeck
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    com.centurylinklabs.watchtower.enable: "true"
  labels:
    io.kompose.service: rabbitmq
  name: rabbitmq
spec:
  ports:
  - name: "5672"
    port: 5672
    targetPort: 5672
  - name: "15672"
    port: 15672
    targetPort: 15672
  selector:
    io.kompose.service: rabbitmq
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  name: db
  labels:
    io.kompose.service: db
spec:
  type: NodePort
  ports:
    - port: 5432
  selector:
    io.kompose.service: db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    com.centurylinklabs.watchtower.enable: "true"
  labels:
    io.kompose.service: db
  name: db
spec:
  selector:
    matchLabels:
      io.kompose.service: db
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: db
    spec:
      containers:
      - image: fredboat/postgres:latest
        name: db
        ports:
          - containerPort: 5432
        resources: {}
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: db-claim0
      restartPolicy: Always
      volumes:
      - name: db-claim0
        persistentVolumeClaim:
          claimName: db-claim0
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    com.centurylinklabs.watchtower.enable: "true"
  labels:
    io.kompose.service: lavalink
  name: lavalink
spec:
  selector:
    matchLabels:
      io.kompose.service: lavalink
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: lavalink
    spec:
      containers:
      - command:
        - java
        - -Xmx128m
        - -jar
        - Lavalink.jar
        image: fredboat/lavalink:master
        name: lavalink
        ports:
        - containerPort: 2333
        resources: {}
        volumeMounts:
        - mountPath: /opt/Lavalink/application.yaml
          name: lavalink-config
          subPath: lavalink.yml
        - mountPath: /opt/Lavalink/logs
          name: lavalink-claim0
      restartPolicy: Always
      volumes:
      - name: lavalink-config
        configMap:
          name: fredboat-lavalink-yml
      - name: lavalink-claim0
        persistentVolumeClaim:
          claimName: lavalink-claim0
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    com.centurylinklabs.watchtower.enable: "true"
  labels:
    io.kompose.service: quarterdeck
  name: quarterdeck
spec:
  selector:
    matchLabels:
      io.kompose.service: quarterdeck
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: quarterdeck
    spec:
      containers:
      - command:
        - java
        - -Xmx128m
        - -jar
        - Quarterdeck.jar
        - |
          --spring.application.json={"security": {"admins": [{"name": "docker", "pass": "docker"}]}}
        image: fredboat/quarterdeck:stable-v1
        name: quarterdeck
        ports:
        - containerPort: 4269
        resources: {}
        volumeMounts:
        - mountPath: /opt/Quarterdeck/quarterdeck.yaml
          name: quarterdeck-config
          subPath: quarterdeck.yml
        - mountPath: /opt/Quarterdeck/logs
          name: quarterdeck-claim0
      restartPolicy: Always
      volumes:
      - name: quarterdeck-config
        configMap:
          name: fredboat-quarterdeck-yml
      - name: quarterdeck-claim0
        persistentVolumeClaim:
          claimName: quarterdeck-claim0
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    com.centurylinklabs.watchtower.enable: "true"
  labels:
    io.kompose.service: rabbitmq
  name: rabbitmq
spec:
  selector:
    matchLabels:
      io.kompose.service: rabbitmq
  replicas: 1
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: rabbitmq
    spec:
      containers:
      - image: rabbitmq:3-management
        name: rabbitmq
        ports:
        - containerPort: 5672
        - containerPort: 15672
        resources: {}
      restartPolicy: Always
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    com.centurylinklabs.watchtower.enable: "true"
  labels:
    io.kompose.service: bot
  name: bot
spec:
  selector:
    matchLabels:
      io.kompose.service: bot
  replicas: 1
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: bot
    spec:
      containers:
      - image: skyler91/fredboat:latest
        name: bot
        env:
        - name: SPRING_RABBITMQ_ADDRESSES
          value: amqp://guest:guest@rabbitmq
        ports:
          - containerPort: 1356
        resources: {}
        volumeMounts:
        - mountPath: /opt/FredBoat/fredboat.yml
          name: config-fredboat
          subPath: fredboat.yml
        - mountPath: /opt/FredBoat/common.yml
          name: config-common
          subPath: common.yml
        - mountPath: /opt/FredBoat/logs
          name: bot-claim0
        - mountPath: /opt/FredBoat/music_persistence
          name: bot-claim1
      restartPolicy: Always
      volumes:
      - name: config-fredboat
        configMap:
          name: fredboat-yml
      - name: config-common
        configMap:
          name: fredboat-common-yml
      - name: bot-claim0
        persistentVolumeClaim:
          claimName: bot-claim0
      - name: bot-claim1
        persistentVolumeClaim:
          claimName: bot-claim1
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    com.centurylinklabs.watchtower.enable: "true"
  labels:
    io.kompose.service: sentinel
  name: sentinel
spec:
  selector:
    matchLabels:
      io.kompose.service: sentinel
  replicas: 1
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: sentinel
    spec:
      containers:
      - image: fredboat/sentinel:dev
        name: sentinel
        env:
        - name: SPRING_RABBITMQ_ADDRESSES
          value: amqp://guest:guest@rabbitmq
        resources: {}
        volumeMounts:
        - mountPath: /opt/sentinel/logs
          name: sentinel-claim0
        - mountPath: /opt/sentinel/common.yml
          name: config-common
          subPath: common.yml
      restartPolicy: Always
      volumes:
      - name: sentinel-claim0
        persistentVolumeClaim:
          claimName: sentinel-claim0
      - name: config-common
        configMap:
          name: fredboat-common-yml
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: bot-claim0
  name: bot-claim0
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 100Mi
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: bot-claim1
  name: bot-claim1
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 100Mi
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: db-claim0
  name: db-claim0
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 100Mi
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: lavalink-claim0
  name: lavalink-claim0
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 100Mi
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: quarterdeck-claim0
  name: quarterdeck-claim0
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 100Mi
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: sentinel-claim0
  name: sentinel-claim0
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 100Mi
status: {}
